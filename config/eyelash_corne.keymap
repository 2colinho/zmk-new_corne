#define ZMK_POINTING_DEFAULT_MOVE_VAL 400  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 100  // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <0>;      // 0
    time-to-max-speed-ms = <0>;       // 300
    delay-ms = <0>;                   // 0
};

&mmv {
    time-to-max-speed-ms = <200>;
    acceleration-exponent = <2>;
    trigger-period-ms = <16>;
};

&soft_off { hold-time-ms = <2000>; };

&sk { quick-release; };

/ {
    behaviors {
        td_lshft_caps: td_lshft_caps {
            compatible = "zmk,behavior-tap-dance";
            display-name = "Shift/Caps Lock Tap Dance";
            #binding-cells = <0>;
            bindings = <&kp LEFT_SHIFT>, <&caps_word>;
        };

        td_bspc_bspcwd: td_bspc_bspcwd {
            compatible = "zmk,behavior-tap-dance";
            bindings = <&kp BSPC>, <&kp LC(BSPC)>;

            #binding-cells = <0>;
        };

        td_del_delwd: td_del_delwd {
            compatible = "zmk,behavior-tap-dance";
            bindings = <&kp DEL>, <&kp LC(DEL)>;

            #binding-cells = <0>;
        };

        mt_hr: mt_hr {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            quick-tap-ms = <175>;
        };

        mt_hr_lh: mt_hr_lh {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            quick-tap-ms = <175>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <7 22 36 8 23 37 9 10 11 12 24 25 26 27 38 39 40 41 42 43 44 45 46 47>;
        };

        mt_hr_rh: mt_hr_rh {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            quick-tap-ms = <175>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <42 43 44 45 46 47 47 0 1 2 3 4 5 13 14 15 16 17 18 28 29 30 31 32 33>;
        };

        mt_hr_comma: mt_hr_comma {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&kp>, <&comma_semi>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            quick-tap-ms = <175>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <42 43 44 45 46 47 47 0 1 2 3 4 5 13 14 15 16 17 18 28 29 30 31 32 33>;
        };

        mt_hr_dot: mt_hr_dot {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&kp>, <&dot_colon>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            quick-tap-ms = <175>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <42 43 44 45 46 47 47 0 1 2 3 4 5 13 14 15 16 17 18 28 29 30 31 32 33>;
        };

        mt_mkp: mt_mkp {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&kp>, <&mkp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        mt_msc: mt_msc {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&kp>, <&msc>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        mt_sel_line: mt_sel_line {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&kp>, <&sel_line>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        mt_del: mt_del {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&kp>, <&td_del_delwd>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        mt_rgb_ug: mt_rgb_ug {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&kp>, <&rgb_ug>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        lt_hr: lt_hr {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            quick-tap-ms = <175>;
        };

        lt_hr_lh: lt_hr_lh {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            quick-tap-ms = <175>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <7 22 36 8 23 37 9 10 11 12 24 25 26 27 38 39 40 41 42 43 44 45 46 47>;
        };

        lt_hr_rh: lt_hr_rh {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            quick-tap-ms = <175>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <42 43 44 45 46 47 47 0 1 2 3 4 5 13 14 15 16 17 18 28 29 30 31 32 33>;
        };

        lt_hr_bspc: lt_hr_bspc {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&mo>, <&td_bspc_bspcwd>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            quick-tap-ms = <175>;
        };

        lt_hr_del: lt_hr_del {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&mo>, <&td_del_delwd>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            quick-tap-ms = <175>;
        };

        sl_cont_sel: sl_cont_sel {
            compatible = "zmk,behavior-sticky-key";
            bindings = <&mo>;
            #binding-cells = <1>;
            release-after-ms = <5000>;
            quick-release;

            /delete-property/ ignore-modifiers;
        };

        lshft_caps: lshft_caps {
            compatible = "zmk,behavior-mod-morph";
            bindings = <&sk LEFT_SHIFT>, <&caps_word>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        rshft_caps: rshft_caps {
            compatible = "zmk,behavior-mod-morph";
            bindings = <&sk RIGHT_SHIFT>, <&kp CAPS>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT)>;
        };

        comma_semi: comma_semi {
            compatible = "zmk,behavior-mod-morph";
            bindings = <&kp COMMA>, <&kp SEMI>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        dot_colon: dot_colon {
            compatible = "zmk,behavior-mod-morph";
            bindings = <&kp DOT>, <&kp COLON>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mm_move_tab: mm_move_tab {
            compatible = "zmk,behavior-mod-morph";
            bindings = <&kp LC(LA(DOWN))>, <&kp LC(LS(LA(K)))>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    rgb_encoder: rgb_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&rgb_ug RGB_BRI>, <&rgb_ug RGB_BRD>;
    };

    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <100>;
    };

    combos {
        compatible = "zmk,combos";

        combo_softoff {
            bindings = <&soft_off>;
            key-positions = <1 15 29>;
            layers = <0>;
        };

        combo_bootloader_left {
            bindings = <&bootloader>;
            key-positions = <1 29>;
            layers = <11>;
        };

        combo_bootloader_right {
            bindings = <&bootloader>;
            key-positions = <11 40>;
            layers = <11>;
        };

        combo_tab {
            bindings = <&kp TAB>;
            key-positions = <1 2>;
            layers = <0>;
        };

        combo_question {
            bindings = <&kp QUESTION>;
            key-positions = <40 25>;
            layers = <0>;
        };

        combo_lbrc {
            bindings = <&kp LBRC>;
            key-positions = <33 32>;
            layers = <1>;
        };

        combo_rbrc {
            bindings = <&kp RBRC>;
            key-positions = <36 37>;
            layers = <1>;
        };

        combo_lessthan {
            bindings = <&kp LESS_THAN>;
            key-positions = <17 18>;
            layers = <1>;
        };

        combo_greaterthan {
            bindings = <&kp GREATER_THAN>;
            key-positions = <22 23>;
            layers = <1>;
        };
    };

    macros {
        sel_word_fwd: sel_word_fwd {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp LC(RIGHT) &kp LC(LEFT)>,
                <&macro_press>,
                <&kp LC(LS(RIGHT))>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&kp LC(LS(RIGHT))>,
                <&macro_tap>,
                <&sl_cont_sel 6>;

            wait-ms = <0>;
            tap-ms = <0>;
        };

        sel_word_bwd: sel_word_bwd {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp LC(LEFT) &kp LC(RIGHT)>,
                <&macro_press>,
                <&kp LC(LS(LEFT))>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&kp LC(LS(LEFT))>,
                <&macro_tap>,
                <&sl_cont_sel 6>;

            wait-ms = <0>;
            tap-ms = <0>;
        };

        sel_line: sel_line {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp HOME &kp LS(END)>,
                <&macro_tap>,
                <&sl_cont_sel 6>;

            wait-ms = <0>;
            tap-ms = <0>;
        };

        cont_sel_word_fwd: cont_sel_word_fwd {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LC(LS(RIGHT))>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&kp LC(LS(RIGHT))>,
                <&macro_tap>,
                <&sl_cont_sel 6>;

            wait-ms = <0>;
            tap-ms = <0>;
        };

        cont_sel_word_bwd: cont_sel_word_bwd {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LC(LS(LEFT))>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&kp LC(LS(LEFT))>,
                <&macro_tap>,
                <&sl_cont_sel 6>;

            wait-ms = <0>;
            tap-ms = <0>;
        };

        cont_sel_line: cont_sel_line {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LS(DOWN)>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&kp LS(DOWN)>,
                <&macro_tap>,
                <&kp LS(END)>,
                <&macro_tap>,
                <&sl_cont_sel 6>;

            wait-ms = <0>;
            tap-ms = <0>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            display-name = "QWERTY";
            bindings = <
&kp TAB                  &kp Q           &kp W             &lt_hr_lh 11 E        &kp R           &kp T                                    &mmv MOVE_UP                     &kp Y    &kp U            &lt_hr_rh 11 I            &kp O              &kp P      &td_bspc_bspcwd
&mt LEFT_CONTROL ESCAPE  &lt_hr_lh 13 A  &lt_hr_lh 1 S     &lt_hr_lh 10 D        &lt_hr_lh 3 F   &kp G                    &mmv MOVE_LEFT  &mkp LCLK       &mmv MOVE_RIGHT  &kp H    &lt_hr_rh 3 J    &lt_hr_rh 10 K            &lt_hr_rh 1 L      &kp SQT    &mt_del RIGHT_CONTROL 0
&lshft_caps              &kp Z           &mt_hr_lh LGUI X  &mt_hr_lh LEFT_ALT C  &lt_hr_lh 18 V  &kp B      &kp C_MUTE                    &mmv MOVE_DOWN                   &kp N    &lt_hr_rh 18 M   &mt_hr_comma RIGHT_ALT 0  &mt_hr_dot RGUI 0  &kp SLASH  &rshft_caps
                                                           &lshft_caps           &lt_hr_del 3 0  &kp SPACE                                                                 &kp RET  &lt_hr_bspc 8 0  &rshft_caps
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
        };

        symbol {
            display-name = "SYM";
            bindings = <
&trans            &mt N1 EXCL  &mt N2 AT  &mt N3 HASH     &mt N4 DLLR    &mt N5 PRCNT                    &trans          &mt N6 CARET  &mt N7 AMPS      &mt N8 ASTRK  &mt N9 LPAR  &mt N0 RPAR  &trans
&kp LEFT_CONTROL  &none        &kp TILDE  &kp GRAVE       &kp MINUS      &kp LPAR                &trans  &trans  &trans  &kp RPAR      &kp PLUS         &kp BSLH      &kp PIPE     &none        &td_del_delwd
&none             &none        &kp LGUI   &kp LEFT_ALT    &kp UNDER      &kp LBKT      &trans            &trans          &kp RBKT      &kp EQUAL        &none         &none        &none        &none
                                          &kp LEFT_SHIFT  &td_del_delwd  &kp SPACE                                       &kp RET       &td_bspc_bspcwd  &none
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        navigation {
            display-name = "NAV";
            bindings = <
&trans            &none                 &none               &none                       &none              &none                        &trans          &kp PG_UP  &mt HOME LC(LEFT)  &kp UP     &mt END LC(RIGHT)  &kp LC(LS(LA(P)))  &trans
&kp LEFT_CONTROL  &mt_sel_line LC(A) 0  &sel_word_bwd       &none                       &sel_word_fwd      &none                &trans  &trans  &trans  &kp PG_DN  &kp LEFT           &kp DOWN   &kp RIGHT          &none              &td_del_delwd
&none             &mt LC(LS(Z)) LC(Z)   &mt LEFT_ALT LC(X)  &mt LEFT_ALT LC(LS(LA(C)))  &kp LC(LS(LA(V)))  &none      &trans            &trans          &none      &sel_word_bwd      &sel_line  &sel_word_fwd      &none              &tog 4
                                                            &kp LEFT_SHIFT              &td_del_delwd      &kp SPACE                                    &kp RET    &td_bspc_bspcwd    &none
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        navigation_momentary {
            display-name = "NAV";
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                    &trans          &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans            &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans            &trans          &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans                                    &trans  &trans  &trans
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        navigation_lock {
            display-name = "NAV";
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                    &trans          &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans            &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans            &trans          &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans                                    &trans  &trans  &trans
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        navigation_cont_sel {
            display-name = "NAV";
            bindings = <
&trans  &trans          &trans              &trans  &trans              &trans                    &trans          &trans  &trans              &trans          &trans              &trans  &trans
&trans  &cont_sel_line  &cont_sel_word_bwd  &trans  &cont_sel_word_fwd  &trans            &trans  &trans  &trans  &trans  &trans              &trans          &trans              &trans  &trans
&trans  &trans          &trans              &trans  &trans              &trans  &trans            &trans          &trans  &cont_sel_word_bwd  &cont_sel_line  &cont_sel_word_fwd  &trans  &trans
                                            &trans  &trans              &trans                                    &trans  &trans              &trans
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        navigation_cont_sel_sl {
            display-name = "NAV";
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                    &trans          &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans            &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans            &trans          &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans                                    &trans  &trans  &trans
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        numpad {
            display-name = "NUM";
            bindings = <
&trans            &none  &none     &none           &none  &none                        &trans          &kp FSLH   &kp N7        &kp N8  &kp N9  &kp STAR  &trans
&kp LEFT_CONTROL  &none  &none     &none           &none  &none                &trans  &trans  &trans  &kp MINUS  &kp N4        &kp N5  &kp N6  &kp PLUS  &td_del_delwd
&none             &none  &kp LGUI  &kp LEFT_ALT    &none  &none      &trans            &trans          &kp N0     &kp NUMBER_1  &kp N2  &kp N3  &kp DOT   &tog 9
                                   &kp LEFT_SHIFT  &none  &kp SPACE                                    &kp RET    &none         &kp N0
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        numpad_momentary {
            display-name = "NUM";
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                    &trans          &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans            &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans            &trans          &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans                                    &trans  &trans  &trans
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        numpad_lock {
            display-name = "NUM";
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                    &trans          &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans            &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans            &trans          &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans                                    &trans  &trans  &trans
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        window {
            display-name = "WIN";
            bindings = <
&none             &none  &none                   &none           &none              &none                    &trans          &kp LS(LG(UP))    &kp LS(LG(LEFT))        &kp LA(LG(UP))          &kp LS(LG(RIGHT))   &none  &none
&kp LEFT_CONTROL  &none  &kp LC(LG(LEFT_ARROW))  &none           &kp LC(LG(RIGHT))  &none            &trans  &trans  &trans  &kp LS(LG(DOWN))  &kp LA(LG(LEFT_ARROW))  &kp LA(LG(DOWN_ARROW))  &kp LA(LG(RIGHT))   &none  &kp RIGHT_CONTROL
&none             &none  &kp LGUI                &kp LEFT_ALT    &none              &none  &trans            &trans          &none             &kp LG(PG_DN)           &mt RIGHT_ALT LA(F4)    &mt RGUI LG(PG_UP)  &none  &none
                                                 &kp LEFT_SHIFT  &kp LG(TAB)        &none                                    &none             &kp LG(D)               &kp RIGHT_SHIFT
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        function {
            display-name = "FN";
            bindings = <
&bt BT_CLR        &bt BT_SEL 0      &bt BT_SEL 1             &bt BT_SEL 2                 &bt BT_SEL 3     &bt BT_SEL 4                       &trans          &none  &kp F7  &kp F8            &kp F9       &kp F12  &none
&kp LEFT_CONTROL  &kp C_PLAY_PAUSE  &kp C_MUTE               &kp C_VOLUME_DOWN            &kp C_VOLUME_UP  &kp PRINTSCREEN            &trans  &trans  &trans  &none  &kp F4  &kp F5            &kp F6       &kp F11  &kp RIGHT_CONTROL
&none             &none             &mt_rgb_ug LGUI RGB_TOG  &mt_rgb_ug LEFT_ALT RGB_BRD  &rgb_ug RGB_BRI  &rgb_ug RGB_EFF  &trans            &trans          &none  &kp F1  &mt RIGHT_ALT F2  &mt RGUI F3  &kp F10  &none
                                                             &kp LEFT_SHIFT               &none            &none                                              &none  &none   &kp RIGHT_SHIFT
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        mouse {
            display-name = "MOU";
            bindings = <
&none             &none  &none     &none           &none   &none                        &trans          &msc SCRL_UP    &mkp LCLK       &mmv MOVE_UP             &mkp RCLK                &kp LC(LS(LA(P)))  &none
&kp LEFT_CONTROL  &none  &mo 15    &mo 16          &mo 17  &none                &trans  &trans  &trans  &msc SCRL_DOWN  &mmv MOVE_LEFT  &mmv MOVE_DOWN           &mmv MOVE_RIGHT          &none              &kp RIGHT_CONTROL
&none             &none  &kp LGUI  &kp LEFT_ALT    &none   &none      &trans            &trans          &none           &msc SCRL_LEFT  &mt_mkp RIGHT_ALT MCLK   &mt_msc RGUI SCRL_RIGHT  &none              &tog 14
                                   &kp LEFT_SHIFT  &none   &mkp RCLK                                    &mkp LCLK       &mkp MB4        &mt_mkp RIGHT_SHIFT MB5
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        mouse_momentary {
            display-name = "MOU";
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                    &trans          &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans            &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans            &trans          &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans                                    &trans  &trans  &trans
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        mouse_lock {
            display-name = "MOU";
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                    &trans          &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans            &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans            &trans          &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans                                    &trans  &trans  &trans
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        mouse_xslow {
            display-name = "MOU";
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                    &trans          &trans  &trans            &mmv MOVE_Y(-40)  &trans           &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans            &trans  &trans  &trans  &trans  &mmv MOVE_X(-40)  &mmv MOVE_Y(40)   &mmv MOVE_X(40)  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans            &trans          &trans  &trans            &trans            &trans           &trans  &trans
                        &trans  &trans  &trans                                    &trans  &trans            &trans
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        mouse_slow {
            display-name = "MOU";
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                    &trans          &trans  &trans             &mmv MOVE_Y(-120)  &trans            &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans            &trans  &trans  &trans  &trans  &mmv MOVE_X(-120)  &mmv MOVE_Y(120)   &mmv MOVE_X(120)  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans            &trans          &trans  &trans             &trans             &trans            &trans  &trans
                        &trans  &trans  &trans                                    &trans  &trans             &trans
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        mouse_fast {
            display-name = "MOU";
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                    &trans          &trans  &trans              &mmv MOVE_Y(-1600)  &trans             &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans            &trans  &trans  &trans  &trans  &mmv MOVE_X(-1600)  &mmv MOVE_Y(1600)   &mmv MOVE_X(1600)  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans            &trans          &trans  &trans              &trans              &trans             &trans  &trans
                        &trans  &trans  &trans                                    &trans  &trans              &trans
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        browser {
            display-name = "BRO";
            bindings = <
&none             &none          &none     &none           &kp LC(R)  &kp LC(T)                    &trans          &none         &kp LA(LEFT)      &kp LC(LA(UP))         &kp LA(RIGHT)      &none  &none
&kp LEFT_CONTROL  &kp LC(LS(A))  &none     &kp LC(LS(G))   &kp LC(G)  &none                &trans  &trans  &trans  &kp LA(HOME)  &kp LC(LA(LEFT))  &mm_move_tab           &kp LC(LA(RIGHT))  &none  &kp RIGHT_CONTROL
&none             &none          &kp LGUI  &kp LEFT_ALT    &none      &none      &trans            &trans          &kp LC(N)     &none             &kp RIGHT_ALT          &kp RGUI           &none  &none
                                           &kp LEFT_SHIFT  &none      &kp SLASH                                    &kp LC(L)     &none             &mt RIGHT_SHIFT LA(F)
            >;

            sensor-bindings = <&scroll_encoder>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        continue_selection {
            if-layers = <2 6>;
            then-layer = <5>;
        };

        navigation_momentary {
            if-layers = <3>;
            then-layer = <2>;
        };

        navigation_lock {
            if-layers = <4>;
            then-layer = <2>;
        };

        numpad_momentary {
            if-layers = <8>;
            then-layer = <7>;
        };

        numpad_lock {
            if-layers = <9>;
            then-layer = <7>;
        };

        mouse_momentary {
            if-layers = <13>;
            then-layer = <12>;
        };

        mouse_lock {
            if-layers = <14>;
            then-layer = <12>;
        };
    };
};
