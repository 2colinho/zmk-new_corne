#define ZMK_POINTING_DEFAULT_MOVE_VAL 400  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 100  // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <0>;      // 0
    time-to-max-speed-ms = <0>;       // 300
    delay-ms = <0>;                   // 0
};

&mmv {
    time-to-max-speed-ms = <200>;
    acceleration-exponent = <2>;
    trigger-period-ms = <16>;
};

&soft_off { hold-time-ms = <2000>; };

/ {
    behaviors {
        td_lshft_caps: td_lshft_caps {
            compatible = "zmk,behavior-tap-dance";
            display-name = "Shift/Caps Lock Tap Dance";
            #binding-cells = <0>;
            bindings = <&skq LEFT_SHIFT>, <&caps_word>, <&kp CAPS>;
        };

        td_bspc_bspcwd: td_bspc_bspcwd {
            compatible = "zmk,behavior-tap-dance";
            bindings = <&kp BSPC>, <&kp LC(BSPC)>;

            #binding-cells = <0>;
        };

        td_del_delwd: td_del_delwd {
            compatible = "zmk,behavior-tap-dance";
            bindings = <&kp DEL>, <&kp LC(DEL)>;

            #binding-cells = <0>;
        };

        td_pars: td_pars {
            compatible = "zmk,behavior-tap-dance";
            bindings = <&kp LPAR>, <&mc_pars>;

            #binding-cells = <0>;
        };

        td_abkts: td_abkts {
            compatible = "zmk,behavior-tap-dance";
            bindings = <&kp LESS_THAN>, <&mc_abkts>;

            #binding-cells = <0>;
        };

        td_bkts: td_bkts {
            compatible = "zmk,behavior-tap-dance";
            bindings = <&kp LBKT>, <&mc_bkts>;

            #binding-cells = <0>;
        };

        td_brcs: td_brcs {
            compatible = "zmk,behavior-tap-dance";
            bindings = <&kp LBRC>, <&mc_brcs>;

            #binding-cells = <0>;
        };

        td_tognav: td_tognav {
            compatible = "zmk,behavior-tap-dance";
            bindings = <&none>, <&tog 4>;

            #binding-cells = <0>;
        };

        td_dot_tognum: td_dot_tognum {
            compatible = "zmk,behavior-tap-dance";
            bindings = <&kp DOT>, <&tog 9>;

            #binding-cells = <0>;
        };

        td_togmou: td_togmou {
            compatible = "zmk,behavior-tap-dance";
            bindings = <&none>, <&tog 14>;

            #binding-cells = <0>;
        };

        mtq: mtq {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
            quick-tap-ms = <175>;
        };

        mtq_mkp: mtq_mkp {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&kp>, <&mkp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
            quick-tap-ms = <175>;
        };

        ltq: ltq {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
            quick-tap-ms = <175>;
        };

        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            quick-tap-ms = <175>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <7 8 9 10 11 12 22 23 24 25 26 27 36 37 38 39 40 41 42 43 44 45 46 47>;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            quick-tap-ms = <175>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 5 13 14 15 16 17 18 28 29 30 31 32 33 42 43 44 45 46 47 47>;
        };

        hml_sel_line: hml_sel_line {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&kp>, <&sel_line>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            quick-tap-ms = <175>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <7 8 9 10 11 12 22 23 24 25 26 27 36 37 38 39 40 41 42 43 44 45 46 47>;
        };

        hml_rgb_tog: hml_rgb_tog {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&kp>, <&rgb_tog>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            quick-tap-ms = <175>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <7 8 9 10 11 12 22 23 24 25 26 27 36 37 38 39 40 41 42 43 44 45 46 47>;
        };

        hml_rgb_brd: hml_rgb_brd {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&kp>, <&rgb_brd>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            quick-tap-ms = <175>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <7 8 9 10 11 12 22 23 24 25 26 27 36 37 38 39 40 41 42 43 44 45 46 47>;
        };

        hmr_comma: hmr_comma {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&kp>, <&comma_semi>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            quick-tap-ms = <175>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 5 13 14 15 16 17 18 28 29 30 31 32 33 42 43 44 45 46 47 47>;
        };

        hmr_dot: hmr_dot {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&kp>, <&dot_colon>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            quick-tap-ms = <175>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 5 13 14 15 16 17 18 28 29 30 31 32 33 42 43 44 45 46 47 47>;
        };

        hmr_mkp: hmr_mkp {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&kp>, <&mkp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            quick-tap-ms = <175>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 5 13 14 15 16 17 18 28 29 30 31 32 33 42 43 44 45 46 47 47>;
        };

        hmr_msc: hmr_msc {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&kp>, <&msc>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            quick-tap-ms = <175>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 5 13 14 15 16 17 18 28 29 30 31 32 33 42 43 44 45 46 47 47>;
        };

        hmr_sel_word_fwd: hmr_sel_word_fwd {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&kp>, <&sel_word_fwd>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            quick-tap-ms = <175>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 5 13 14 15 16 17 18 28 29 30 31 32 33 42 43 44 45 46 47 47>;
        };

        hmr_sel_line: hmr_sel_line {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&kp>, <&sel_line>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            quick-tap-ms = <175>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 5 13 14 15 16 17 18 28 29 30 31 32 33 42 43 44 45 46 47 47>;
        };

        hll: hll {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            quick-tap-ms = <175>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <7 8 9 10 11 12 22 23 24 25 26 27 36 37 38 39 40 41 42 43 44 45 46 47>;
        };

        hlr: hlr {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            quick-tap-ms = <175>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 5 13 14 15 16 17 18 28 29 30 31 32 33 42 43 44 45 46 47 47>;
        };

        as: as {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <135>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
        };

        boot: boot {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&bootloader>, <&none>;

            #binding-cells = <2>;
            tapping-term-ms = <2000>;
            flavor = "tap-preferred";
        };

        boot0: boot0 {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&bootloader>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <2000>;
            flavor = "tap-preferred";
        };

        skq: skq {
            compatible = "zmk,behavior-sticky-key";
            bindings = <&kp>;
            #binding-cells = <1>;
            release-after-ms = <1000>;
            quick-release;
            ignore-modifiers;
        };

        sl_cont_sel: sl_cont_sel {
            compatible = "zmk,behavior-sticky-key";
            bindings = <&mo>;
            #binding-cells = <1>;
            release-after-ms = <5000>;
            quick-release;

            /delete-property/ ignore-modifiers;
        };

        lshft_caps: lshft_caps {
            compatible = "zmk,behavior-mod-morph";
            bindings = <&skq LEFT_SHIFT>, <&caps_word>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        rshft_caps: rshft_caps {
            compatible = "zmk,behavior-mod-morph";
            bindings = <&skq RIGHT_SHIFT>, <&kp CAPS>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT)>;
        };

        comma_semi: comma_semi {
            compatible = "zmk,behavior-mod-morph";
            bindings = <&kp COMMA>, <&kp SEMI>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        dot_colon: dot_colon {
            compatible = "zmk,behavior-mod-morph";
            bindings = <&kp DOT>, <&kp COLON>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        down_hyperk: down_hyperk {
            compatible = "zmk,behavior-mod-morph";
            bindings = <&kp LC(LA(DOWN))>, <&kp LA(LC(LS(LG(K))))>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    rgb_encoder: rgb_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&rgb_ug RGB_BRI>, <&rgb_ug RGB_BRD>;
    };

    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <100>;
    };

    combos {
        compatible = "zmk,combos";

        combo_softoff {
            bindings = <&soft_off>;
            key-positions = <1 15 29>;
            layers = <0>;
        };

        combo_escape {
            bindings = <&kp ESCAPE>;
            key-positions = <15 16>;
            layers = <0>;
            timeout-ms = <35>;
            require-prior-idle-ms = <150>;
        };

        combo_tab {
            bindings = <&kp TAB>;
            key-positions = <16 17>;
            layers = <0 1 3 4 6 8 9>;
            timeout-ms = <50>;
            require-prior-idle-ms = <150>;
        };

        combo_ret {
            bindings = <&kp RET>;
            key-positions = <37 38>;
            timeout-ms = <50>;
            require-prior-idle-ms = <150>;
            layers = <0 1 3 4 6 8 9>;
        };

        combo_bspc {
            bindings = <&kp BSPC>;
            key-positions = <23 24>;
            layers = <0 1 3 4 6 8 9>;
            timeout-ms = <50>;
            require-prior-idle-ms = <150>;
        };

        combo_bspcwd {
            bindings = <&kp LC(BSPC)>;
            key-positions = <8 9>;
            timeout-ms = <35>;
            require-prior-idle-ms = <150>;
            layers = <0 1 3 4 6 8 9>;
        };

        combo_del {
            bindings = <&kp DEL>;
            key-positions = <24 25>;
            layers = <0 1 3 4 6 8 9>;
            timeout-ms = <35>;
            require-prior-idle-ms = <150>;
        };

        combo_delwd {
            bindings = <&kp LC(DEL)>;
            key-positions = <9 10>;
            timeout-ms = <35>;
            require-prior-idle-ms = <150>;
            layers = <0 1 3 4 6 8 9>;
        };

        combo_selall {
            bindings = <&kp LC(A)>;
            key-positions = <14 17>;
            timeout-ms = <35>;
            require-prior-idle-ms = <150>;
            layers = <0 1 3 4 6 8 9>;
        };

        combo_save {
            bindings = <&kp LC(S)>;
            key-positions = <15 17>;
            timeout-ms = <35>;
            require-prior-idle-ms = <150>;
            layers = <0 1 3 4 6 8 9>;
        };

        combo_undo {
            bindings = <&kp LC(Z)>;
            key-positions = <29 30>;
            timeout-ms = <50>;
            require-prior-idle-ms = <150>;
            layers = <0 1 3 4 6 8 9>;
        };

        combo_redo {
            bindings = <&kp LC(LS(Z))>;
            key-positions = <29 31>;
            timeout-ms = <50>;
            require-prior-idle-ms = <150>;
            layers = <0 1 3 4 6 8 9>;
        };

        combo_cut {
            bindings = <&kp LC(X)>;
            key-positions = <30 32>;
            timeout-ms = <50>;
            require-prior-idle-ms = <150>;
            layers = <0 1 3 4 6 8 9>;
        };

        combo_copy {
            bindings = <&kp LC(INS)>;
            key-positions = <30 31>;
            timeout-ms = <35>;
            require-prior-idle-ms = <150>;
            layers = <0 1 3 4 6 8 9>;
        };

        combo_paste {
            bindings = <&kp LS(INS)>;
            key-positions = <31 32>;
            timeout-ms = <50>;
            require-prior-idle-ms = <150>;
            layers = <0 1 3 4 6 8 9>;
        };

        combo_lbrc {
            bindings = <&td_brcs>;
            key-positions = <32 33>;
            layers = <1>;
        };

        combo_rbrc {
            bindings = <&kp RBRC>;
            key-positions = <36 37>;
            layers = <1>;
        };

        combo_lessthan {
            bindings = <&td_abkts>;
            key-positions = <17 18>;
            layers = <1>;
        };

        combo_greaterthan {
            bindings = <&kp GREATER_THAN>;
            key-positions = <22 23>;
            layers = <1>;
        };

        combo_mb4 {
            bindings = <&mkp MB4>;
            key-positions = <8 9>;
            layers = <13 14 15 16 17>;
        };

        combo_mb5 {
            bindings = <&mkp MB5>;
            key-positions = <9 10>;
            layers = <13 14 15 16 17>;
        };
    };

    macros {
        sel_word_fwd: sel_word_fwd {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp LC(RIGHT) &kp LC(LEFT)>,
                <&macro_press>,
                <&kp LC(LS(RIGHT))>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&kp LC(LS(RIGHT))>,
                <&macro_tap>,
                <&sl_cont_sel 6>;

            wait-ms = <0>;
            tap-ms = <0>;
        };

        sel_word_bwd: sel_word_bwd {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp LC(LEFT) &kp LC(RIGHT)>,
                <&macro_press>,
                <&kp LC(LS(LEFT))>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&kp LC(LS(LEFT))>,
                <&macro_tap>,
                <&sl_cont_sel 6>;

            wait-ms = <0>;
            tap-ms = <0>;
        };

        sel_line: sel_line {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp HOME &kp LS(END)>,
                <&macro_tap>,
                <&sl_cont_sel 6>;

            wait-ms = <0>;
            tap-ms = <0>;
        };

        cont_sel_word_fwd: cont_sel_word_fwd {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LC(LS(RIGHT))>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&kp LC(LS(RIGHT))>,
                <&macro_tap>,
                <&sl_cont_sel 6>;

            wait-ms = <0>;
            tap-ms = <0>;
        };

        cont_sel_word_bwd: cont_sel_word_bwd {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LC(LS(LEFT))>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&kp LC(LS(LEFT))>,
                <&macro_tap>,
                <&sl_cont_sel 6>;

            wait-ms = <0>;
            tap-ms = <0>;
        };

        cont_sel_line: cont_sel_line {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LS(DOWN)>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&kp LS(DOWN)>,
                <&macro_tap>,
                <&kp LS(END)>,
                <&macro_tap>,
                <&sl_cont_sel 6>;

            wait-ms = <0>;
            tap-ms = <0>;
        };

        mc_pars: mc_pars {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LPAR &kp RPAR &kp LEFT>;
            wait-ms = <0>;
            tap-ms = <0>;
        };

        mc_abkts: mc_abkts {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LESS_THAN &kp GREATER_THAN &kp LEFT>;
            wait-ms = <0>;
            tap-ms = <0>;
        };

        mc_bkts: mc_bkts {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LBKT &kp RBKT &kp LEFT>;
            wait-ms = <0>;
            tap-ms = <0>;
        };

        mc_brcs: mc_brcs {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LBRC &kp RBRC &kp LEFT>;
            wait-ms = <0>;
            tap-ms = <0>;
        };

        rgb_tog: rgb_tog {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&rgb_ug RGB_TOG>;
            wait-ms = <0>;
            tap-ms = <0>;
        };

        rgb_brd: rgb_brd {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&rgb_ug RGB_BRD>;
            wait-ms = <0>;
            tap-ms = <0>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            display-name = "QWERTY";
            bindings = <
&none  &kp Q                &kp W        &kp E            &kp R      &kp T                                     &mmv MOVE_UP                     &kp Y       &kp U           &kp I                   &kp O            &kp P                   &none
&none  &hml LEFT_CONTROL A  &hll 1 S     &hll 10 D        &hll 3 F   &hll 11 G                 &mmv MOVE_LEFT  &mkp LCLK       &mmv MOVE_RIGHT  &hlr 11 H   &hlr 3 J        &hlr 10 K               &hlr 1 L         &hmr RIGHT_CONTROL SQT  &none
&none  &hll 13 Z            &hml LGUI X  &hml LEFT_ALT C  &hll 18 V  &kp B       &kp C_MUTE                    &mmv MOVE_DOWN                   &kp N       &hlr 18 M       &hmr_comma RIGHT_ALT 0  &hmr_dot RGUI 0  &kp SLASH               &none
                                         &none            &kp SPACE  &ltq 3 TAB                                                                 &ltq 8 RET  &td_lshft_caps  &none
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
        };

        symbol {
            display-name = "SYM";
            bindings = <
&none  &as N1 EXCL       &as N2 AT      &as N3 HASH                  &as N4 DLLR  &as N5 PRCNT                    &trans          &as N6 CARET  &as N7 AMPS     &as N8 ASTRK         &as N9 LPAR     &as N0 RPAR        &none
&none  &kp LEFT_CONTROL  &kp GRAVE      &kp TILDE                    &kp PLUS     &td_pars                &trans  &trans  &trans  &kp RPAR      &kp MINUS       &kp SEMI             &kp COLON       &kp RIGHT_CONTROL  &none
&none  &none             &hml LGUI SQT  &hml LEFT_ALT DOUBLE_QUOTES  &kp EQUAL    &td_bkts      &trans            &trans          &kp RBKT      &kp UNDER       &hmr RIGHT_ALT BSLH  &hmr RGUI PIPE  &none              &none
                                        &none                        &kp SPACE    &kp TAB                                         &kp RET       &sk LEFT_SHIFT  &none
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        navigation {
            display-name = "NAV";
            bindings = <
&none  &none                         &none            &none                  &none          &none                      &trans          &kp PG_UP  &as HOME LC(LEFT)  &kp UP                     &as END LC(RIGHT)         &kp LA(LC(LS(LG(P))))  &none
&none  &hml_sel_line LEFT_CONTROL 0  &sel_word_bwd    &none                  &sel_word_fwd  &none              &trans  &trans  &trans  &kp PG_DN  &kp LEFT           &kp DOWN                   &kp RIGHT                 &kp RIGHT_CONTROL      &none
&none  &kp LC(Z)                     &hml LGUI LC(X)  &hml LEFT_ALT LC(INS)  &kp LS(INS)    &none    &trans            &trans          &none      &sel_word_bwd      &hmr_sel_line RIGHT_ALT 0  &hmr_sel_word_fwd RGUI 0  &td_tognav             &none
                                                      &none                  &kp SPACE      &kp TAB                                    &kp RET    &sk LEFT_SHIFT     &none
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        navigation_momentary {
            display-name = "NAV ";
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                    &trans          &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans            &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans            &trans          &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans                                    &trans  &trans  &trans
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        navigation_lock {
            display-name = "NAV ";
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                    &trans          &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans            &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans            &trans          &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans                                    &trans  &trans  &trans
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        navigation_cont_sel {
            display-name = "NAV ";
            bindings = <
&trans  &trans          &trans              &trans  &trans              &trans                    &trans          &trans  &trans              &trans          &trans              &trans  &trans
&trans  &cont_sel_line  &cont_sel_word_bwd  &trans  &cont_sel_word_fwd  &trans            &trans  &trans  &trans  &trans  &trans              &trans          &trans              &trans  &trans
&trans  &trans          &trans              &trans  &trans              &trans  &trans            &trans          &trans  &cont_sel_word_bwd  &cont_sel_line  &cont_sel_word_fwd  &trans  &trans
                                            &trans  &trans              &trans                                    &trans  &trans              &trans
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        navigation_cont_sel_sl {
            display-name = "NAV ";
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                    &trans          &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans            &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans            &trans          &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans                                    &trans  &trans  &trans
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        numpad {
            display-name = "NUM";
            bindings = <
&none  &none             &none     &none         &none      &none                      &trans          &kp FSLH   &kp N7          &kp N8             &kp N9        &kp STAR                 &none
&none  &kp LEFT_CONTROL  &none     &none         &none      &none              &trans  &trans  &trans  &kp MINUS  &kp N4          &kp N5             &kp N6        &hmr RIGHT_CONTROL PLUS  &none
&none  &none             &kp LGUI  &kp LEFT_ALT  &none      &none    &trans            &trans          &kp N0     &kp NUMBER_1    &hmr RIGHT_ALT N2  &hmr RGUI N3  &td_dot_tognum           &none
                                   &none         &kp SPACE  &kp TAB                                    &kp RET    &sk LEFT_SHIFT  &none
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        numpad_momentary {
            display-name = "NUM ";
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                    &trans          &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans            &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans            &trans          &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans                                    &trans  &trans  &trans
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        numpad_lock {
            display-name = "NUM ";
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                    &trans          &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans            &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans            &trans          &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans                                    &trans  &trans  &trans
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        window {
            display-name = "WIN";
            bindings = <
&none  &none             &none                   &none         &none              &none                          &trans          &kp LS(LG(UP))    &kp LS(LG(LEFT))        &kp LA(LG(UP))          &kp LS(LG(RIGHT))    &none              &none
&none  &kp LEFT_CONTROL  &kp LC(LG(LEFT_ARROW))  &none         &kp LC(LG(RIGHT))  &none                  &trans  &trans  &trans  &kp LS(LG(DOWN))  &kp LA(LG(LEFT_ARROW))  &kp LA(LG(DOWN_ARROW))  &kp LA(LG(RIGHT))    &kp RIGHT_CONTROL  &none
&none  &none             &kp LGUI                &kp LEFT_ALT  &none              &none        &trans            &trans          &none             &kp LG(PG_DN)           &hmr RIGHT_ALT LA(F4)   &hmr RGUI LG(PG_UP)  &none              &none
                                                 &none         &kp LG(D)          &kp LG(TAB)                                    &none             &sk LEFT_SHIFT          &none
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        function {
            display-name = "FN";
            bindings = <
&none  &bt BT_CLR                      &bt BT_SEL 0         &bt BT_SEL 1             &bt BT_SEL 2     &bt BT_SEL 3                       &trans          &none  &kp F7          &kp F8             &kp F9        &kp F12                 &none
&none  &hml LEFT_CONTROL C_PLAY_PAUSE  &kp C_MUTE           &kp C_VOLUME_DOWN        &kp C_VOLUME_UP  &kp PRINTSCREEN            &trans  &trans  &trans  &none  &kp F4          &kp F5             &kp F6        &hmr RIGHT_CONTROL F11  &none
&none  &boot 0 0                       &hml_rgb_tog LGUI 0  &hml_rgb_brd LEFT_ALT 0  &rgb_ug RGB_BRI  &rgb_ug RGB_EFF  &trans            &trans          &none  &kp F1          &hmr RIGHT_ALT F2  &hmr RGUI F3  &boot0 0 F10            &none
                                                            &none                    &none            &none                                              &none  &sk LEFT_SHIFT  &none
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        mouse {
            display-name = "MOU";
            bindings = <
&none  &none             &none     &none         &none      &none                    &trans          &msc SCRL_UP    &mkp LCLK                 &mmv MOVE_UP             &mkp RCLK                 &kp LA(LC(LS(LG(P))))  &none
&none  &kp LEFT_CONTROL  &mo 15    &mo 16        &mo 17     &none            &trans  &trans  &trans  &msc SCRL_DOWN  &mmv MOVE_LEFT            &mmv MOVE_DOWN           &mmv MOVE_RIGHT           &kp RIGHT_CONTROL      &none
&none  &none             &kp LGUI  &kp LEFT_ALT  &none      &none  &trans            &trans          &none           &msc SCRL_LEFT            &hmr_mkp RIGHT_ALT MCLK  &hmr_msc RGUI SCRL_RIGHT  &td_togmou             &none
                                   &none         &mkp RCLK  &none                                    &none           &mtq_mkp LEFT_SHIFT LCLK  &none
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        mouse_momentary {
            display-name = "MOU ";
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                    &trans          &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans            &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans            &trans          &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans                                    &trans  &trans  &trans
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        mouse_lock {
            display-name = "MOU ";
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                    &trans          &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans            &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans            &trans          &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans                                    &trans  &trans  &trans
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        mouse_xslow {
            display-name = "MOU ";
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                    &trans          &trans  &trans            &mmv MOVE_Y(-40)  &trans           &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans            &trans  &trans  &trans  &trans  &mmv MOVE_X(-40)  &mmv MOVE_Y(40)   &mmv MOVE_X(40)  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans            &trans          &trans  &trans            &trans            &trans           &trans  &trans
                        &trans  &trans  &trans                                    &trans  &trans            &trans
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        mouse_slow {
            display-name = "MOU ";
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                    &trans          &trans  &trans             &mmv MOVE_Y(-120)  &trans            &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans            &trans  &trans  &trans  &trans  &mmv MOVE_X(-120)  &mmv MOVE_Y(120)   &mmv MOVE_X(120)  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans            &trans          &trans  &trans             &trans             &trans            &trans  &trans
                        &trans  &trans  &trans                                    &trans  &trans             &trans
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        mouse_fast {
            display-name = "MOU ";
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                    &trans          &trans  &trans              &mmv MOVE_Y(-1600)  &trans             &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans            &trans  &trans  &trans  &trans  &mmv MOVE_X(-1600)  &mmv MOVE_Y(1600)   &mmv MOVE_X(1600)  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans            &trans          &trans  &trans              &trans              &trans             &trans  &trans
                        &trans  &trans  &trans                                    &trans  &trans              &trans
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        browser {
            display-name = "BRO";
            bindings = <
&none  &none                        &none     &none          &kp LC(R)  &kp LC(T)                    &trans          &none         &kp LA(LEFT)    &kp LC(LA(UP))  &kp LA(RIGHT)  &none              &none
&none  &hml LEFT_CONTROL LC(LS(A))  &none     &kp LC(LS(G))  &kp LC(G)  &none                &trans  &trans  &trans  &kp LA(HOME)  &kp LC(PG_UP)   &down_hyperk    &kp LC(PG_DN)  &kp RIGHT_CONTROL  &none
&none  &none                        &kp LGUI  &kp LEFT_ALT   &none      &none      &trans            &trans          &kp LC(N)     &kp LA(F)       &kp RIGHT_ALT   &kp RGUI       &none              &none
                                              &none          &kp SLASH  &kp LC(L)                                    &none         &sk LEFT_SHIFT  &none
            >;

            sensor-bindings = <&scroll_encoder>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        continue_selection {
            if-layers = <2 6>;
            then-layer = <5>;
        };

        navigation_momentary {
            if-layers = <3>;
            then-layer = <2>;
        };

        navigation_lock {
            if-layers = <4>;
            then-layer = <2>;
        };

        numpad_momentary {
            if-layers = <8>;
            then-layer = <7>;
        };

        numpad_lock {
            if-layers = <9>;
            then-layer = <7>;
        };

        mouse_momentary {
            if-layers = <13>;
            then-layer = <12>;
        };

        mouse_lock {
            if-layers = <14>;
            then-layer = <12>;
        };
    };
};
