#define ZMK_POINTING_DEFAULT_MOVE_VAL 750  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 50   // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <1>;      // 0
    time-to-max-speed-ms = <100>;       // 300
    delay-ms = <0>;                   // 0
};

&mmv {
    time-to-max-speed-ms = <500>;
    acceleration-exponent = <1>;
    trigger-period-ms = <16>;
};

&soft_off { hold-time-ms = <2000>; };

/ {
    behaviors {
        td0: td0 {
            compatible = "zmk,behavior-tap-dance";
            display-name = "Shift/Caps Lock Tap Dance";
            #binding-cells = <0>;
            bindings = <&kp LEFT_SHIFT>, <&caps_word>;
        };

        mt0: mt0 {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&kp>, <&mkp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        lt0: lt0 {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            quick-tap-ms = <175>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <7 22 36 8 23 37 9 10 11 12 24 25 26 27 38 39 40 41 42 43 44 45 46 47>;
        };

        lt1: lt1 {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            quick-tap-ms = <175>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <42 43 44 45 46 47 47 0 1 2 3 4 5 13 14 15 16 17 18 28 29 30 31 32 33>;
        };

        lt2: lt2 {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            quick-tap-ms = <175>;
        };
    };

    rgb_encoder: rgb_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&rgb_ug RGB_BRI>, <&rgb_ug RGB_BRD>;
    };

    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <100>;
    };

    combos {
        compatible = "zmk,combos";

        softoff {
            bindings = <&soft_off>;
            key-positions = <1 15 29>;
            layers = <0>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            display-name = "QWERTY";
            bindings = <
&kp TAB                  &kp Q     &kp W     &kp E     &kp R         &kp T                                    &mmv MOVE_UP                     &kp Y    &kp U               &kp I         &kp O     &kp P         &mt LC(BSPC) BSPC
&mt LEFT_CONTROL ESCAPE  &lt0 6 A  &lt0 1 S  &lt0 3 D  &lt0 2 F      &kp G                    &mmv MOVE_LEFT  &mkp LCLK       &mmv MOVE_RIGHT  &kp H    &lt1 2 J            &kp K         &lt1 1 L  &lt2 7 SEMI   &mt RIGHT_CONTROL SQT
&td0                     &lt0 5 Z  &kp X     &kp C     &lt0 4 V      &kp B      &kp C_MUTE                    &mmv MOVE_DOWN                   &kp N    &lt1 4 M            &kp COMMA     &kp DOT   &lt1 5 SLASH  &mt RIGHT_SHIFT ESC
                                             &kp LGUI  &kp LEFT_ALT  &kp SPACE                                                                 &kp RET  &mt RIGHT_ALT BSPC  &mt RGUI DEL
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
        };

        symbol {
            display-name = "SYM";
            bindings = <
&trans            &kp GRAVE  &none   &kp LBKT  &kp RBKT  &kp MINUS                    &trans          &kp PLUS   &kp LPAR       &kp RPAR          &none     &none     &trans
&kp LEFT_CONTROL  &kp EXCL   &kp AT  &kp HASH  &kp DLLR  &kp PRCNT            &trans  &trans  &trans  &kp CARET  &kp AMPS       &kp ASTRK         &kp BSLH  &kp PIPE  &mt LC(DEL) DEL
&kp LEFT_SHIFT    &kp TILDE  &none   &kp LBRC  &kp RBRC  &kp UNDER  &trans            &trans          &kp EQUAL  &kp LESS_THAN  &kp GREATER_THAN  &none     &none     &none
                                     &trans    &trans    &kp SPACE                                    &kp RET    &kp BSPC       &kp DEL
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        navigation {
            display-name = "NAV";
            bindings = <
&trans            &none                &none              &none              &none              &none                        &trans          &kp PG_UP  &mt HOME LC(LEFT)  &kp UP    &mt END LC(RIGHT)  &kp LC(LS(LA(P)))  &trans
&kp LEFT_CONTROL  &kp LC(LS(LA(A)))    &kp LC(LS(LA(S)))  &none              &kp LC(LS(LA(F)))  &none                &trans  &trans  &trans  &kp PG_DN  &kp LEFT           &kp DOWN  &kp RIGHT          &none              &mt LC(DEL) DEL
&kp LEFT_SHIFT    &mt LC(LS(Z)) LC(Z)  &kp LC(X)          &kp LC(LS(LA(C)))  &kp LC(LS(LA(V)))  &none      &trans            &trans          &none      &none              &none     &none              &none              &none
                                                          &trans             &trans             &kp SPACE                                    &kp RET    &kp BSPC           &kp DEL
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        numpad {
            display-name = "NUM";
            bindings = <
&trans            &none  &none  &none   &none   &none                        &trans          &kp FSLH   &kp N7        &kp N8  &kp N9  &kp STAR  &trans
&kp LEFT_CONTROL  &none  &none  &none   &none   &none                &trans  &trans  &trans  &kp MINUS  &kp N4        &kp N5  &kp N6  &kp PLUS  &mt LC(DEL) DEL
&kp LEFT_SHIFT    &none  &none  &none   &none   &none      &trans            &trans          &none      &kp NUMBER_1  &kp N2  &kp N3  &kp DOT   &none
                                &trans  &trans  &kp SPACE                                    &kp RET    &kp N0        &kp N0
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        window {
            display-name = "WIN";
            bindings = <
&none             &none  &none             &kp LG(TAB)  &none              &none                    &trans          &kp LS(LG(UP))    &kp LS(LG(LEFT))  &kp LA(LG(UP))          &kp LS(LG(RIGHT))  &kp LC(LS(LA(P)))  &none
&kp LEFT_CONTROL  &none  &kp LC(LG(LEFT))  &kp LG(D)    &kp LC(LG(RIGHT))  &none            &trans  &trans  &trans  &kp LS(LG(DOWN))  &kp LA(LG(LEFT))  &kp LA(LG(DOWN_ARROW))  &kp LA(LG(RIGHT))  &none              &kp RIGHT_CONTROL
&kp LEFT_SHIFT    &none  &none             &none        &none              &none  &trans            &trans          &none             &kp LG(PG_DN)     &kp LA(F4)              &kp LG(PG_UP)      &none              &kp RIGHT_SHIFT
                                           &trans       &trans             &none                                    &none             &kp RIGHT_ALT     &kp RGUI
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        function {
            display-name = "FN";
            bindings = <
&bt BT_CLR        &bt BT_SEL 0      &bt BT_SEL 1     &bt BT_SEL 2       &bt BT_SEL 3     &bt BT_SEL 4                       &trans          &none  &kp F7         &kp F8    &kp F9  &kp F12  &none
&kp LEFT_CONTROL  &kp C_PLAY_PAUSE  &kp C_MUTE       &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &kp PRINTSCREEN            &trans  &trans  &trans  &none  &kp F4         &kp F5    &kp F6  &kp F11  &kp RIGHT_CONTROL
&kp LEFT_SHIFT    &none             &rgb_ug RGB_TOG  &rgb_ug RGB_BRD    &rgb_ug RGB_BRI  &rgb_ug RGB_EFF  &trans            &trans          &none  &kp F1         &kp F2    &kp F3  &kp F10  &kp RIGHT_SHIFT
                                                     &trans             &trans           &none                                              &none  &kp RIGHT_ALT  &kp RGUI
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        mouse {
            display-name = "MOU";
            bindings = <
&none             &none  &none  &none   &none   &none                        &trans          &msc SCRL_UP    &mkp LCLK           &mmv MOVE_UP    &mkp RCLK        &kp LC(LS(LA(P)))  &none
&kp LEFT_CONTROL  &none  &none  &none   &none   &none                &trans  &trans  &trans  &msc SCRL_DOWN  &mmv MOVE_LEFT      &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &none              &kp RIGHT_CONTROL
&kp LEFT_SHIFT    &none  &none  &none   &none   &none      &trans            &trans          &none           &msc SCRL_LEFT      &mkp MCLK       &msc SCRL_RIGHT  &none              &kp RIGHT_SHIFT
                                &trans  &trans  &mkp RCLK                                    &mkp LCLK       &mt0 RIGHT_ALT MB4  &mt0 RGUI MB5
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        browser {
            display-name = "BRO";
            bindings = <
&none             &none  &none     &none          &kp LC(R)  &kp LC(T)                    &trans          &none         &kp LA(LEFT)      &kp LC(LA(UP))          &kp LA(RIGHT)      &none  &none
&kp LEFT_CONTROL  &none  &kp FSLH  &kp LC(LS(G))  &kp LC(G)  &none                &trans  &trans  &trans  &kp LA(HOME)  &kp LC(LA(LEFT))  &kp LC(LA(DOWN_ARROW))  &kp LC(LA(RIGHT))  &none  &kp RIGHT_CONTROL
&kp LEFT_SHIFT    &none  &none     &none          &none      &none      &trans            &trans          &kp LC(N)     &none             &none                   &none              &none  &kp RIGHT_SHIFT
                                   &trans         &trans     &kp LC(L)                                    &kp LA(F)     &kp RIGHT_ALT     &kp RGUI
            >;

            sensor-bindings = <&scroll_encoder>;
        };
    };
};
